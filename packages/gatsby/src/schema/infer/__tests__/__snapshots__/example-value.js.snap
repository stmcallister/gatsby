// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Get example value for type inference build enum values for fields from array on nodes 1`] = `
Object {
  "anArray": Object {
    "field": "anArray",
  },
  "context___nestedObject___name": Object {
    "field": "context.nestedObject.name",
  },
  "context___nestedObject___someOtherProperty": Object {
    "field": "context.nestedObject.someOtherProperty",
  },
  "date": Object {
    "field": "date",
  },
  "frontmatter___blue": Object {
    "field": "frontmatter.blue",
  },
  "frontmatter___circle": Object {
    "field": "frontmatter.circle",
  },
  "frontmatter___date": Object {
    "field": "frontmatter.date",
  },
  "frontmatter___draft": Object {
    "field": "frontmatter.draft",
  },
  "frontmatter___title": Object {
    "field": "frontmatter.title",
  },
  "hair": Object {
    "field": "hair",
  },
  "key_with__unsupported_values": Object {
    "field": "key_with__unsupported_values",
  },
  "name": Object {
    "field": "name",
  },
  "nestedArrays": Object {
    "field": "nestedArrays",
  },
  "objectsInArray": Object {
    "field": "objectsInArray",
  },
  "objectsInArray___field1": Object {
    "field": "objectsInArray.field1",
  },
  "objectsInArray___field2": Object {
    "field": "objectsInArray.field2",
  },
  "objectsInArray___field3": Object {
    "field": "objectsInArray.field3",
  },
}
`;

exports[`Get example value for type inference builds field examples from an array of nodes 1`] = `
Object {
  "anArray": Array [
    1,
  ],
  "context": Object {
    "nestedObject": Object {
      "name": "Inner name",
      "someOtherProperty": 1,
    },
  },
  "date": "2006-07-22T22:39:53.000Z",
  "frontmatter": Object {
    "blue": 100,
    "circle": "happy",
    "date": "2006-07-22T22:39:53.000Z",
    "draft": false,
    "title": "The world of dash and adventure",
  },
  "hair": 1,
  "key-with..unsupported-values": true,
  "name": "The Mad Max",
  "nestedArrays": Array [
    Array [
      1,
    ],
  ],
  "objectsInArray": Array [
    Object {
      "field1": true,
      "field2": 1,
      "field3": "foo",
    },
  ],
}
`;

exports[`Type conflicts doesn't report ignored fields 1`] = `
Array [
  TypeConflictEntry {
    "selector": "Conflict_3.other",
    "types": Map {
      "number" => Object {
        "description": "",
        "value": 1,
      },
      "string" => Object {
        "description": "",
        "value": "foo",
      },
    },
  },
]
`;

exports[`Type conflicts reports conflict when array has mixed types and its origin 1`] = `
Array [
  TypeConflictEntry {
    "selector": "Conflict_2.arrayOfMixedType",
    "types": Map {
      "[string,number,boolean]" => Object {
        "description": "",
        "value": Array [
          "string1",
          5,
          "string2",
          true,
        ],
      },
    },
  },
]
`;

exports[`Type conflicts reports date and string conflicts 1`] = `
Array [
  TypeConflictEntry {
    "selector": "Conflict_1.date",
    "types": Map {
      "date" => Object {
        "description": "",
        "value": "2019-01-01",
      },
      "string" => Object {
        "description": "",
        "value": "Totally not a date",
      },
    },
  },
]
`;

exports[`Type conflicts reports type conflicts and its origin 1`] = `
Array [
  TypeConflictEntry {
    "selector": "Conflict_1.stringOrNumber",
    "types": Map {
      "string" => Object {
        "description": "",
        "value": "string",
      },
      "number" => Object {
        "description": "",
        "value": 5,
      },
    },
  },
]
`;
